#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'getWays' function below.
#
# The function is expected to return a LONG_INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. LONG_INTEGER_ARRAY c
#
def solve(dp,sum1,c,n):
    for i in range(n+1):
        dp[i][0]=1
    for j in range(1,sum1+1):
        dp[0][j]=0
    for i in range(1,n+1):
        for j in range(1,sum1+1):
            if c[i-1]<=j:
                dp[i][j]=dp[i-1][j]+dp[i][j-c[i-1]]
            else:
                dp[i][j]=dp[i-1][j]
    return dp[n][sum1]
def getWays(sum1, c):
    n=len(c)
    dp=[[-1 for i in range(sum1+1)]for j in range(n+1)]
    return solve(dp,sum1,c,n)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    m = int(first_multiple_input[1])

    c = list(map(int, input().rstrip().split()))

    # Print the number of ways of making change for 'n' units using coins having the values given by 'c'

    ways = getWays(n, c)

    fptr.write(str(ways) + '\n')

    fptr.close()

